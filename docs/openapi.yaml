openapi: 3.0.3
info:
  title: VoltHome API
  version: "1.0.0"
  description: REST API VoltHome (projects + auth refresh sessions)
servers:
  - url: /v1

paths:
  /auth/login:
    post:
      summary: Issue access/refresh after successful user verification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [userId]
              properties:
                userId:
                  type: string
      responses:
        "200":
          description: tokens issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken: { type: string }
                  refreshToken: { type: string }

  /auth/refresh:
    post:
      summary: Rotate refresh token and return new access/refresh
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken: { type: string }
      responses:
        "200":
          description: rotated
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken: { type: string }
                  refreshToken: { type: string }
                  sessionId: { type: string }
        "401":
          description: invalid or expired refresh

  /auth/logout:
    post:
      summary: Revoke current refresh token
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [refreshToken]
            properties:
              refreshToken: { type: string }
    responses:
      "200":
        description: ok

  /auth/logout_all:
    post:
      summary: Revoke all refresh sessions for current user
      security:
        - bearerAuth: []
      responses:
        "200":
          description: ok

  /projects:
    get:
      summary: List projects of current user
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: query
          name: since
          schema: { type: string, format: date-time }
        - in: query
          name: limit
          schema: { type: integer, default: 50 }
      responses:
        "200":
          description: ok
    post:
      summary: Create project
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                id: { type: string, format: uuid }
                name: { type: string, maxLength: 200 }
                note: { type: string, maxLength: 2000 }
      responses:
        "201":
          description: created

  /projects/{id}:
    get:
      summary: Get project tree
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200": { description: ok }
        "404": { description: not found }
    put:
      summary: Update project meta
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string, maxLength: 200 }
                note: { type: string, maxLength: 2000 }
      responses:
        "200": { description: ok }
        "404": { description: not found }
    delete:
      summary: Soft delete project
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      responses:
        "200": { description: ok }
        "404": { description: not found }

  /projects/{id}/delta:
    get:
      summary: Delta since timestamp
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
        - in: query
          name: since
          required: true
          schema: { type: string, format: date-time }
      responses:
        "200": { description: ok }
        "404": { description: not found }

  /projects/{id}/batch:
    post:
      summary: Apply batch (LWW) with optional baseVersion
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                baseVersion: { type: integer }
                ops:
                  type: object
                  properties:
                    rooms: { type: object }
                    groups: { type: object }
                    devices: { type: object }
      responses:
        "200": { description: ok }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT